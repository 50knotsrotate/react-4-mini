{"version":3,"sources":["images/dm_white_logo.png","Components/Home/Home.js","Components/TopicList/TopicList.js","Components/Post/Post.js","routes.js","Components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","Component","TopicList","displayTopics","posts","map","post","key","id","react_router_dom","to","concat","title","Post","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","_this2","find","match","params","setState","_this$state","routes","react_router","exact","path","component","Nav","src","logo","alt","App","Components_Nav_Nav","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4+NAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oVCczBC,0LATX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,iFALWE,sBCoBJC,0LAhBX,IAAIC,EAAgBC,EAAMC,IAAI,SAAAC,GAC5B,OACET,EAAAC,EAAAC,cAAA,MAAIQ,IAAKD,EAAKE,IACZX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAE,SAAAC,OAAWL,EAAKE,KAAOF,EAAKM,UAI1C,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,UAAKI,WAZWF,cC2BTY,qBA3Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXV,MAAO,GACPW,QAAS,IAJMR,mFAOC,IAAAS,EAAAN,KAGdZ,EAAOF,EAAMqB,KAAK,SAAAnB,GAAI,OAAIA,EAAKE,MAAQgB,EAAKV,MAAMY,MAAMC,OAAOnB,KACnEU,KAAKU,SAAS,CACZhB,MAAON,EAAKM,MACZW,QAASjB,EAAKiB,2CAGT,IAAAM,EACoBX,KAAKI,MAAxBV,EADDiB,EACCjB,MAAOW,EADRM,EACQN,QACf,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKa,GACLf,EAAAC,EAAAC,cAAA,SAAIwB,WAtBOtB,cCGjB6B,EAAAjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,KACElC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWtC,IACjCC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWhC,IACvCL,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWrB,sBCe9BsB,0LAlBX,OACEtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,KACPb,EAAAC,EAAAC,cAAA,OAAKqC,IAAKC,IAAMC,IAAI,aAEtBzC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,KAAT,SAEFb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAMC,GAAG,WAAT,oBAZMT,cCcHsC,0LAXX,OACE1C,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyC,EAAD,MACCV,WANO7B,cCMEwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c3031a62.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"react-4-mini/static/media/dm_white_logo.911b7180.png\";","import React, { Component } from \"react\";\nimport \"./Home.css\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <h1>Welcome to the DevMountain tech blog!</h1>\n        <h2>Head over to the topic browser to see all the latest posts!</h2>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport posts from \"./../../post_data.json\";\nimport \"./TopicList.css\";\n\nclass TopicList extends Component {\n  render() {\n    let displayTopics = posts.map(post => {\n      return (\n        <li key={post.id}>\n          <Link to={`/post/${post.id}`}>{post.title}</Link>\n        </li>\n      );\n    });\n    return (\n      <div className=\"TopicList\">\n        <h1>Latest Blog Posts...</h1>\n        <ul>{displayTopics}</ul>\n      </div>\n    );\n  }\n}\n\nexport default TopicList;\n","import React, { Component } from \"react\";\nimport posts from \"./../../post_data.json\";\nimport \"./Post.css\";\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      content: \"\"\n    };\n  }\n  componentDidMount() {\n    // This is where you would make an axios call to a server in a fullstack application\n    // but for today we'll be just be filtering an array of dummy data\n    let post = posts.find(post => post.id === +this.props.match.params.id);\n    this.setState({\n      title: post.title,\n      content: post.content\n    });\n  }\n  render() {\n    const { title, content } = this.state;\n    return (\n      <div className=\"Post\">\n        <h1>{title}</h1>\n        <p>{content}</p>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Home from \"./Components/Home/Home\";\nimport TopicList from \"./Components/TopicList/TopicList\";\nimport Post from \"./Components/Post/Post\";\n\nexport default (\n  <Switch>\n    <Route exact path=\"/\" component={Home} />\n    <Route exact path=\"/topics\" component={TopicList} />\n    <Route exact path=\"/post/:id\" component={Post} />\n  </Switch>\n);\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport logo from \"./../../images/dm_white_logo.png\";\nimport \"./Nav.css\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <div className=\"Nav\">\n        <Link to=\"/\">\n          <img src={logo} alt=\"dm logo\" />\n        </Link>\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/topics\">Topics</Link>\n          </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { HashRouter } from \"react-router-dom\";\nimport routes from \"./routes\";\nimport Nav from \"./Components/Nav/Nav\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <Nav />\n          {routes}\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}